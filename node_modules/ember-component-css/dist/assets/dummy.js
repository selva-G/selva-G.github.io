/* jshint ignore:start */

/* jshint ignore:end */

define('dummy/acceptance/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    componentPath: Ember['default'].computed("model.component", function () {
      return "acceptance/tests/" + this.get("model.component");
    })
  });

});
define('dummy/acceptance/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.0",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "component", [get(env, context, "componentPath")], {});
        return fragment;
      }
    };
  }()));

});
define('dummy/acceptance/tests/ampersand-self-selector/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: "ampersand-self"
  });

});
define('dummy/acceptance/tests/ampersand-self-selector/expectation', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    styles: {
      ".ampersand-self": {
        fontWeight: "bold"
      }
    }
  };

});
define('dummy/acceptance/tests/component-self-selector/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: "component-self"
  });

});
define('dummy/acceptance/tests/component-self-selector/expectation', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    styles: {
      ".component-self": {
        fontWeight: "bold"
      }
    }
  };

});
define('dummy/acceptance/tests/descendant-namespacing/expectation', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    styles: {
      "[data-test-green]": {
        color: "rgb(0, 255, 0)"
      },

      "[data-test-black]": {
        color: "rgb(0, 0, 0)"
      },

      "[data-test-orange]": {
        color: "rgb(255, 127, 0)"
      }
    }
  };

});
define('dummy/acceptance/tests/descendant-namespacing/green-text/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.0",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","colored");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        content(env, morph0, context, "yield");
        return fragment;
      }
    };
  }()));

});
define('dummy/acceptance/tests/descendant-namespacing/orange-text/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.0",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","colored");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        content(env, morph0, context, "yield");
        return fragment;
      }
    };
  }()));

});
define('dummy/acceptance/tests/descendant-namespacing/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.0",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"data-test-green","");
          var el2 = dom.createTextNode("text");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.0",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"data-test-orange","");
          var el2 = dom.createTextNode("text");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.0",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","colored");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"data-test-black","");
        var el3 = dom.createTextNode("text");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "acceptance/tests/descendant-namespacing/green-text", [], {}, child0, null);
        block(env, morph1, context, "acceptance/tests/descendant-namespacing/orange-text", [], {}, child1, null);
        return fragment;
      }
    };
  }()));

});
define('dummy/acceptance/tests/pod-component-in-components/expectation', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    styles: {
      ".location-explanation": {
        color: "rgb(0, 0, 255)"
      }
    }
  };

});
define('dummy/acceptance/tests/pod-component-in-components/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.0",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "pod-component-in-components");
        return fragment;
      }
    };
  }()));

});
define('dummy/acceptance/tests/pod-component-in-pod/expectation', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    styles: {
      ".location-explanation": {
        color: "rgb(255, 0, 0)"
      }
    }
  };

});
define('dummy/acceptance/tests/pod-component-in-pod/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.0",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "outer-pod/inner-pod/pod-component-in-pod");
        return fragment;
      }
    };
  }()));

});
define('dummy/acceptance/tests/pod-component-in-root/expectation', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    styles: {
      ".location-explanation": {
        color: "rgb(0, 255, 0)"
      }
    }
  };

});
define('dummy/acceptance/tests/pod-component-in-root/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.0",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "pod-component-in-root");
        return fragment;
      }
    };
  }()));

});
define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {

  'use strict';

  Ember['default'].MODEL_FACTORY_INJECTIONS = true;

  var App = Ember['default'].Application.extend({
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix,
    Resolver: Resolver['default']
  });

  loadInitializers['default'](App, config['default'].modulePrefix);

  exports['default'] = App;

});
define('dummy/components/pod-component-in-components/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.0",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","location-explanation");
        var el2 = dom.createTextNode("\n  This component lives in the ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("components");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" directory.\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('dummy/initializers/app-version', ['exports', 'dummy/config/environment', 'ember'], function (exports, config, Ember) {

  'use strict';

  var classify = Ember['default'].String.classify;

  exports['default'] = {
    name: "App Version",
    initialize: function initialize(container, application) {
      var appName = classify(application.toString());
      Ember['default'].libraries.register(appName, config['default'].APP.version);
    }
  };

});
define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {

  'use strict';

  exports.initialize = initialize;

  function initialize(container, application) {
    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);

    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {
      window[classifiedName] = application;
    }
  }

  ;

  exports['default'] = {
    name: "export-application-global",

    initialize: initialize
  };

});
define('dummy/my-component/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.0",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","foo");
        var el2 = dom.createTextNode("this is my ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","bar");
        var el3 = dom.createTextNode("component");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("!");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('dummy/outer-pod/inner-pod/pod-component-in-pod/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.0",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","location-explanation");
        var el2 = dom.createTextNode("\n  This component lives inside a pod, in the ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("outer-pod/inner-pod");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" directory.\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('dummy/pod-component-in-root/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.0",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","location-explanation");
        var el2 = dom.createTextNode("\n  This component lives in the root of the ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("podModulePrefix");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(", which for this app is ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("/app");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(".\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {

  'use strict';

  var Router = Ember['default'].Router.extend({
    location: config['default'].locationType
  });

  Router.map(function () {
    this.route("acceptance", { path: "/acceptance/:component" });
  });

  exports['default'] = Router;

});
define('dummy/templates/application', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.0",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "my-component");
        content(env, morph1, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('dummy/tests/acceptance/computed-styles-test', ['ember', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/config/environment'], function (Ember, qunit, startApp, Environment) {

  'use strict';

  var application;

  qunit.module("Acceptance - Computed Styles", {
    beforeEach: function beforeEach() {
      application = startApp['default']();
      application.registry.optionsForType("expectation", { instantiate: false });
    },

    afterEach: function afterEach() {
      Ember['default'].run(application, "destroy");
    }
  });

  Environment['default'].ACCEPTANCE_TESTS.forEach(function (name) {
    qunit.test(name, function (assert) {
      visit("/acceptance/" + name);

      andThen(function () {
        var $root = Ember['default'].$(application.rootElement);

        // Look up the expected styles for this test
        var expectation = application.registry.lookup("expectation:acceptance/tests/" + name);
        var selectors = Object.keys(expectation.styles);

        // Locate each element with an expected set of styles, and assert that it matches those styles
        selectors.forEach(function (selector) {
          var expectedStyles = expectation.styles[selector];
          var selectorMatches = $root.find(selector);

          // Ensure we're only working against a single element
          if (selectorMatches.length !== 1) {
            throw new Error("Invalid test: `" + selector + "` matches " + selectorMatches.length + " elements.");
          }

          // Calculate the styles applied to the given element, and then pluck the ones we care about
          var computedStyles = window.getComputedStyle(selectorMatches[0]);
          var interestingStyles = Ember['default'].getProperties(computedStyles, Object.keys(expectedStyles));

          assert.deepEqual(interestingStyles, expectedStyles);
        });
      });
    });
  });

});
define('dummy/tests/acceptance/computed-styles-test.jshint', function () {

  'use strict';

  module('JSHint - acceptance');
  test('acceptance/computed-styles-test.js should pass jshint', function() { 
    ok(true, 'acceptance/computed-styles-test.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/controller.jshint', function () {

  'use strict';

  module('JSHint - acceptance');
  test('acceptance/controller.js should pass jshint', function() { 
    ok(true, 'acceptance/controller.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/tests/ampersand-self-selector/component.jshint', function () {

  'use strict';

  module('JSHint - acceptance/tests/ampersand-self-selector');
  test('acceptance/tests/ampersand-self-selector/component.js should pass jshint', function() { 
    ok(true, 'acceptance/tests/ampersand-self-selector/component.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/tests/ampersand-self-selector/expectation.jshint', function () {

  'use strict';

  module('JSHint - acceptance/tests/ampersand-self-selector');
  test('acceptance/tests/ampersand-self-selector/expectation.js should pass jshint', function() { 
    ok(true, 'acceptance/tests/ampersand-self-selector/expectation.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/tests/component-self-selector/component.jshint', function () {

  'use strict';

  module('JSHint - acceptance/tests/component-self-selector');
  test('acceptance/tests/component-self-selector/component.js should pass jshint', function() { 
    ok(true, 'acceptance/tests/component-self-selector/component.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/tests/component-self-selector/expectation.jshint', function () {

  'use strict';

  module('JSHint - acceptance/tests/component-self-selector');
  test('acceptance/tests/component-self-selector/expectation.js should pass jshint', function() { 
    ok(true, 'acceptance/tests/component-self-selector/expectation.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/tests/descendant-namespacing/expectation.jshint', function () {

  'use strict';

  module('JSHint - acceptance/tests/descendant-namespacing');
  test('acceptance/tests/descendant-namespacing/expectation.js should pass jshint', function() { 
    ok(true, 'acceptance/tests/descendant-namespacing/expectation.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/tests/pod-component-in-components/expectation.jshint', function () {

  'use strict';

  module('JSHint - acceptance/tests/pod-component-in-components');
  test('acceptance/tests/pod-component-in-components/expectation.js should pass jshint', function() { 
    ok(true, 'acceptance/tests/pod-component-in-components/expectation.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/tests/pod-component-in-pod/expectation.jshint', function () {

  'use strict';

  module('JSHint - acceptance/tests/pod-component-in-pod');
  test('acceptance/tests/pod-component-in-pod/expectation.js should pass jshint', function() { 
    ok(true, 'acceptance/tests/pod-component-in-pod/expectation.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/tests/pod-component-in-root/expectation.jshint', function () {

  'use strict';

  module('JSHint - acceptance/tests/pod-component-in-root');
  test('acceptance/tests/pod-component-in-root/expectation.js should pass jshint', function() { 
    ok(true, 'acceptance/tests/pod-component-in-root/expectation.js should pass jshint.'); 
  });

});
define('dummy/tests/app.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('app.js should pass jshint', function() { 
    ok(true, 'app.js should pass jshint.'); 
  });

});
define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {

  'use strict';

  var resolver = Resolver['default'].create();

  resolver.namespace = {
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix
  };

  exports['default'] = resolver;

});
define('dummy/tests/helpers/resolver.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/resolver.js should pass jshint', function() { 
    ok(true, 'helpers/resolver.js should pass jshint.'); 
  });

});
define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/router', 'dummy/config/environment'], function (exports, Ember, Application, Router, config) {

  'use strict';



  exports['default'] = startApp;
  function startApp(attrs) {
    var application;

    var attributes = Ember['default'].merge({}, config['default'].APP);
    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;

    Ember['default'].run(function () {
      application = Application['default'].create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
    });

    return application;
  }

});
define('dummy/tests/helpers/start-app.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/start-app.js should pass jshint', function() { 
    ok(true, 'helpers/start-app.js should pass jshint.'); 
  });

});
define('dummy/tests/lib/component-css-preprocessor', function () {

  'use strict';

  /* jshint node: true */
  "use strict";

  var path = require("path");
  var expect = require("expect.js");
  var walkSync = require("walk-sync");
  var broccoli = require("broccoli");

  var ComponentCssPreprocessor = require("../../lib/component-css-preprocessor");

  describe("component-css-preprocessor", function () {
    var cssFixturePath = path.join(__dirname, "css_fixtures");
    var scssFixturePath = path.join(__dirname, "scss_fixtures");
    var addon = {
      podDir: function podDir() {
        return null;
      },
      pod: {
        lookup: Object.create(null)
      }
    };
    var treeBuilder;

    afterEach(function () {
      if (treeBuilder) {
        return treeBuilder.cleanup();
      }
    });

    describe("constructor", function () {
      it("is named component-css and acquires the passed in options", function () {
        var plugin = new ComponentCssPreprocessor({ addon: addon });

        expect(plugin.name).to.eql("component-css");
        expect(plugin.options).to.eql({ addon: addon });
      });
    });

    describe("toTree", function () {
      it("returns the styles directory + pod-styles.css", function () {
        var stylesPath = "app/styles";
        var tree = new ComponentCssPreprocessor({
          addon: addon
        }).toTree(cssFixturePath, stylesPath);

        treeBuilder = new broccoli.Builder(tree);

        return treeBuilder.build().then(function (results) {
          var actual = walkSync(results.directory);
          var expected = ["app/", "app/styles/", "app/styles/app.css", "pod-styles.css"];

          expect(actual).to.eql(expected);
        });
      });

      it("returns the styles directory + pod-styles.scss", function () {
        var stylesPath = "app/styles";
        var tree = new ComponentCssPreprocessor({
          addon: addon
        }).toTree(scssFixturePath, stylesPath);

        treeBuilder = new broccoli.Builder(tree);

        return treeBuilder.build().then(function (results) {
          var actual = walkSync(results.directory);
          var expected = ["app/", "app/styles/", "app/styles/app.scss", "pod-styles.scss"];

          expect(actual).to.eql(expected);
        });
      });
    });
  });

});
define('dummy/tests/lib/component-css-preprocessor.jshint', function () {

  'use strict';

  module('JSHint - lib');
  test('lib/component-css-preprocessor.js should pass jshint', function() { 
    ok(true, 'lib/component-css-preprocessor.js should pass jshint.'); 
  });

});
define('dummy/tests/router.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('router.js should pass jshint', function() { 
    ok(true, 'router.js should pass jshint.'); 
  });

});
define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {

	'use strict';

	ember_qunit.setResolver(resolver['default']);

});
define('dummy/tests/test-helper.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('test-helper.js should pass jshint', function() { 
    ok(true, 'test-helper.js should pass jshint.'); 
  });

});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (runningTests) {
  require("dummy/tests/test-helper");
} else {
  require("dummy/app")["default"].create({"name":"ember-component-css","version":"0.1.1.df1041b5"});
}

/* jshint ignore:end */
//# sourceMappingURL=dummy.map